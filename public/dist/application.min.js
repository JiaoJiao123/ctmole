"use strict";var ApplicationConfiguration=function(){var applicationModuleName="clinicaltrials",applicationModuleVendorDependencies=["ngResource","ngCookies","ngAnimate","ngTouch","ngSanitize","ui.router","ui.bootstrap","ui.utils"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){"#_=_"===window.location.hash&&(window.location.hash="#!"),angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("alterations"),ApplicationConfiguration.registerModule("cancertypes"),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("drugs"),ApplicationConfiguration.registerModule("genes"),ApplicationConfiguration.registerModule("mappings"),ApplicationConfiguration.registerModule("trials"),ApplicationConfiguration.registerModule("users"),angular.module("alterations").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Details","/","dropdown",!1),Menus.addSubMenuItem("topbar","/","List Genes","genes"),Menus.addSubMenuItem("topbar","/","List Alterations","alterations"),Menus.addSubMenuItem("topbar","/","List Cancer Types","cancertypes"),Menus.addSubMenuItem("topbar","/","List Drugs","drugs"),Menus.addSubMenuItem("topbar","/","List Trials","trials"),Menus.addSubMenuItem("topbar","/","Search Trial","trials/search")}]),angular.module("alterations").config(["$stateProvider",function($stateProvider){$stateProvider.state("listAlterations",{url:"/alterations",templateUrl:"modules/alterations/views/list-alterations.client.view.html"}).state("createAlteration",{url:"/alterations/create",templateUrl:"modules/alterations/views/create-alteration.client.view.html"}).state("viewAlteration",{url:"/alterations/:alterationId",templateUrl:"modules/alterations/views/view-alteration.client.view.html"}).state("editAlteration",{url:"/alterations/:alterationId/edit",templateUrl:"modules/alterations/views/edit-alteration.client.view.html"})}]),angular.module("alterations").controller("AlterationsController",["$scope","$stateParams","$location","Authentication","Alterations",function($scope,$stateParams,$location,Authentication,Alterations){$scope.authentication=Authentication,$scope.create=function(){var alteration=new Alterations({name:this.name});alteration.$save(function(response){$location.path("alterations/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(alteration){if(alteration){alteration.$remove();for(var i in $scope.alterations)$scope.alterations[i]===alteration&&$scope.alterations.splice(i,1)}else $scope.alteration.$remove(function(){$location.path("alterations")})},$scope.update=function(){var alteration=$scope.alteration;alteration.$update(function(){$location.path("alterations/"+alteration._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.alterations=Alterations.alteration.query()},$scope.findOne=function(){$scope.alteration=Alterations.alteration.get({alterationSymbol:$stateParams.alterationSymbol,geneRecordName:$stateParams.geneRecordName})}}]),angular.module("alterations").factory("Alterations",["$resource",function($resource){return{alterationByIds:$resource("alterations/:Ids",{Ids:[]},{query:{isArray:!0}}),alteration:$resource("alterations/:alteration/:gene",{alteration:"@alteration",gene:"@gene"},{update:{method:"PUT"},query:{isArray:!0}}),searchEngine:$resource("alterationGeneral/:searchEngineKeyword",{},{query:{method:"GET",isArray:!0}})}}]),angular.module("cancertypes").run(["Menus",function(Menus){}]),angular.module("cancertypes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listCancertypes",{url:"/cancertypes",templateUrl:"modules/cancertypes/views/list-cancertypes.client.view.html"}).state("createCancertype",{url:"/cancertypes/create",templateUrl:"modules/cancertypes/views/create-cancertype.client.view.html"}).state("viewCancertype",{url:"/cancertypes/:cancertypeSymbol",templateUrl:"modules/cancertypes/views/view-cancertype.client.view.html"}).state("editCancertype",{url:"/cancertypes/:cancertypeSymbol/edit",templateUrl:"modules/cancertypes/views/edit-cancertype.client.view.html"})}]),angular.module("cancertypes").controller("CancertypesController",["$scope","$stateParams","$location","Authentication","Cancertypes",function($scope,$stateParams,$location,Authentication,Cancertypes){$scope.authentication=Authentication,$scope.create=function(){var cancertype=new Cancertypes({name:this.name});cancertype.$save(function(response){$location.path("cancertypes/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(cancertype){if(cancertype){cancertype.$remove();for(var i in $scope.cancertypes)$scope.cancertypes[i]===cancertype&&$scope.cancertypes.splice(i,1)}else $scope.cancertype.$remove(function(){$location.path("cancertypes")})},$scope.update=function(){var cancertype=$scope.cancertype;cancertype.$update(function(){$location.path("cancertypes/"+cancertype.symbol)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.cancertypes=Cancertypes.query()},$scope.findOne=function(){$scope.cancertype=Cancertypes.cancertype.get({cancertypeSymbol:$stateParams.cancertypeSymbol})},$scope.trial=function(trialId){$location.open("#!/trials/"+trialId)}}]),angular.module("cancertypes").factory("Cancertypes",["$resource",function($resource){return{cancertype:$resource("cancertypes/:cancertypeSymbol",{cancertypeSymbol:"@symbol"},{update:{method:"PUT"},query:{isArray:!0}}),newCancertype:$resource("cancertypes/:newCancertypeSymbol/:nctId",{newCancertypeSymbol:"@symbol"}),nctIds:$resource("cancertypes/trials/:nctIds",{nctIds:[]},{get:{isArray:!0}})}}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","Trials","Mappings","Alterations",function($scope,Authentication,Trials,Mappings,Alterations){function endSearch(){$scope.loading=!1,$scope.showResult=!0,$scope.showRefine=!0}function compare(a,b){return a.last_nom<b.last_nom?-1:a.last_nom>b.last_nom?1:0}function autoCreateFilters(data){_.each(data,function(trialItem){Mappings.mappingSearch.get({Idvalue:trialItem.nctId},function(a){for(var alteration_id=[],i=0;i<a.alteration.length;i++)alteration_id.push(a.alteration[i].alteration_Id);alteration_id.length>0&&Alterations.alterationByIds.query({Ids:alteration_id},function(alterations){_.map(alterations,function(value){-1==$scope.mutationIDs.indexOf(value._id)?($scope.mutationIDs.push(value._id),$scope.mutations.push({gene:value.gene,alteration:value.alteration,nctIds:[trialItem.nctId]}),$scope.genes.push(value.gene),$scope.genes=_.uniq($scope.genes)):_.each($scope.mutations,function(mutation){mutation.gene==value.gene&&mutation.alteration==value.alteration&&mutation.nctIds.push(trialItem.nctId)})}),$scope.mutations.sort(compare),$scope.genes.sort(),endSearch()})},function(b){})})}$scope.authentication=Authentication,$scope.loading=!1,$scope.showResult=!1,$scope.showRefine=!1,$scope.allCountries=!1,$scope.firstSearch=!0,$scope.countryCriteria=["United States"],$scope.criteria=[{type:"country",value:["United States"]}],$scope.types=["country"],$scope.geneCriteria=[],$scope.mutationCriteria=[],$scope.trialsNctIds=[],$scope.comTrialIds=[],$scope.trials=[],$scope.find=function(){document.getElementById("USRadio").checked=!0},$scope.showAllCountries=function(){$scope.allCountries=!0,_.each($scope.criteria,function(criterion){"country"==criterion.type&&(criterion.value=["United States"])})},$scope.hideAllCountries=function(){$scope.allCountries=!1,_.each($scope.criteria,function(criterion){"country"==criterion.type&&(criterion.value=["United States"])})},$scope.search=function(searchStr){function searchMappingByStatus(){Mappings.searchByStatus.query({status:!0},function(data){if(data.length>0)for(var i=0;i<data.length;i++)$scope.comTrialIds.push(data[i].nctId)},function(error){console.log("No hits in the mapping table")})}var searchKeyword=$scope.searchKeyword;return void 0===searchKeyword?(bootbox.alert("please input keyword to start search!"),!1):($scope.loading=!0,$scope.showResult=!1,$scope.showRefine=!1,$scope.countries=[],$scope.genes=[],$scope.mutations=[],$scope.mutationIDs=[],$scope.tumorTypes=[],void Trials.searchEngine.query({searchEngineKeyword:searchKeyword},function(data){if(0==data.length)return bootbox.alert("Sorry no result found! Please change your input to restart search"),$scope.searchKeyword="",$scope.loading=!1,!1;for(var i=0;i<data.length;i++)$scope.countries=$scope.countries.concat(data[i].countries),$scope.trialsNctIds.push(data[i].nctId),_.each(data[i].tumorTypes,function(tumorItem){$scope.tumorTypes.push(tumorItem.tumorTypeId)});$scope.tumorTypes=_.uniq($scope.tumorTypes),$scope.tumorTypes.sort(),$scope.countries=_.uniq($scope.countries),$scope.countries.sort(),searchMappingByStatus(),$scope.trials=data,autoCreateFilters(data)},function(error){console.log("search trial error happened")}))},$scope.searchCriteria=function(){return function(trial){for(var tempStr=JSON.stringify(trial),finalFlag=!0,flags=[],types=$scope.types,i=0;i<types.length;i++)flags.push({type:types[i],value:!1});_.each($scope.criteria,function(criterion){var index=$scope.criteria.map(function(e){return e.type}).indexOf(criterion.type);if("status"==criterion.type)"incomplete"==criterion.value?-1==$scope.comTrialIds.indexOf(trial.nctId)?flags[index].value=!0:flags[index].value=!1:"complete"==criterion.value&&(-1!=$scope.comTrialIds.indexOf(trial.nctId)?flags[index].value=!0:flags[index].value=!1);else if("mutation"==criterion.type){var mutationNctIds=[];_.each(criterion.value,function(item){mutationNctIds=mutationNctIds.concat(item.nctIds)}),-1!=mutationNctIds.indexOf(trial.nctId)?flags[index].value=!0:flags[index].value=!1}else{for(var searchStr="",i=0;i<criterion.value.length-1;i++)searchStr+=criterion.value[i]+"|";searchStr+=criterion.value[criterion.value.length-1];var patt=new RegExp(searchStr);void 0!=tempStr.match(patt)&&(flags[index].value=!0)}});for(var i=0;i<flags.length;i++)finalFlag=finalFlag&&flags[i].value;return finalFlag}},$scope.getCriteria=function(checked,value,type){var index=$scope.criteria.map(function(e){return e.type}).indexOf(type);"status"==type||"tumor"==type||"country"==type?0==value.length?($scope.types=_.without($scope.types,type),$scope.criteria.splice(index,1)):-1!==$scope.types.indexOf(type)?_.each($scope.criteria,function(criterion){criterion.type==type&&(criterion.value=value)}):($scope.criteria.push({type:type,value:value}),$scope.types.push(type)):checked?-1==$scope.types.indexOf(type)?($scope.criteria.push({type:type,value:[value]}),$scope.types.push(type)):$scope.criteria[index].value.push(value):$scope.criteria[index].value.length>1?$scope.criteria[index].value=_.without($scope.criteria[index].value,value):($scope.criteria.splice(index,1),$scope.types=_.without($scope.types,type))}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("drugs").run(["Menus",function(Menus){}]),angular.module("drugs").config(["$stateProvider",function($stateProvider){$stateProvider.state("listDrugs",{url:"/drugs",templateUrl:"modules/drugs/views/list-drugs.client.view.html"}).state("createDrug",{url:"/drugs/create",templateUrl:"modules/drugs/views/create-drug.client.view.html"}).state("viewDrug",{url:"/drugs/:drugId",templateUrl:"modules/drugs/views/view-drug.client.view.html"}).state("editDrug",{url:"/drugs/:drugId/edit",templateUrl:"modules/drugs/views/edit-drug.client.view.html"})}]),angular.module("drugs").controller("DrugsController",["$scope","$stateParams","$location","Authentication","Drugs",function($scope,$stateParams,$location,Authentication,Drugs){$scope.authentication=Authentication,$scope.create=function(){var drug=new Drugs({name:this.name});drug.$save(function(response){$location.path("drugs/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(drug){if(drug){drug.$remove();for(var i in $scope.drugs)$scope.drugs[i]===drug&&$scope.drugs.splice(i,1)}else $scope.drug.$remove(function(){$location.path("drugs")})},$scope.update=function(){var drug=$scope.drug;drug.$update(function(){$location.path("drugs/"+drug._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.drugs=Drugs.regular.query()},$scope.findOne=function(){$scope.drug=Drugs.regular.get({drugId:$stateParams.drugId})}}]),angular.module("drugs").factory("Drugs",["$resource",function($resource){return{full:$resource("drugs/full",{},{update:{method:"PUT"}}),regular:$resource("drugs/:drugId",{drugId:"@_id"},{update:{method:"PUT"}})}}]),angular.module("genes").run(["Menus",function(Menus){}]),angular.module("genes").config(["$stateProvider",function($stateProvider){$stateProvider.state("listGenes",{url:"/genes",templateUrl:"modules/genes/views/list-genes.client.view.html"}).state("createGene",{url:"/genes/create",templateUrl:"modules/genes/views/create-gene.client.view.html"}).state("viewGene",{url:"/genes/:symbol",templateUrl:"modules/genes/views/view-gene.client.view.html"}).state("editGene",{url:"/genes/:symbol/edit",templateUrl:"modules/genes/views/edit-gene.client.view.html"})}]),angular.module("genes").controller("GenesController",["$scope","$stateParams","$location","Authentication","Genes",function($scope,$stateParams,$location,Authentication,Genes){$scope.authentication=Authentication,$scope.create=function(){var gene=new Genes({name:this.name});gene.$save(function(response){$location.path("genes/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(gene){if(gene){gene.$remove();for(var i in $scope.genes)$scope.genes[i]===gene&&$scope.genes.splice(i,1)}else $scope.gene.$remove(function(){$location.path("genes")})},$scope.update=function(){var gene=$scope.gene;gene.$update(function(){$location.path("genes/"+gene._id)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.genes=Genes.gene.query()},$scope.findOne=function(){$scope.gene=Genes.gene.get({symbol:$stateParams.symbol})}}]),angular.module("genes").filter("asc",[function(){return function(input){return"asc filter: "+input}}]),angular.module("genes").factory("Genes",["$resource",function($resource){return{gene:$resource("genes/:symbol",{symbol:"@symbol"},{update:{method:"PUT"},query:{isArray:!0}}),nctIds:$resource("genes/trials/:nctIds",{nctIds:[]},{get:{isArray:!0},put:{}})}}]),angular.module("mappings",["localytics.directives","angular-underscore","datatables","datatables.bootstrap"]).constant("Venn",window.venn).constant("D3",window.d3).constant("S",window.S).constant("_",window._).run(["Menus",function(Menus){Menus.addMenuItem("topbar","Mappings","mappings","dropdown",!1,!0,["*"],-1),Menus.addSubMenuItem("topbar","mappings","Find common trials","mappings"),Menus.addSubMenuItem("topbar","mappings","Assign trial","trials/assign")}]),angular.module("mappings").config(["$stateProvider",function($stateProvider){$stateProvider.state("mapping",{url:"/mappings",controller:"MappingsController",templateUrl:"modules/mappings/views/search-mappings.client.view.html"}).state("list",{url:"/mappings/list",controller:"MappingsController",templateUrl:"modules/mappings/views/list-mappings.client.view.html"})}]),angular.module("mappings").controller("MappingsController",["$scope","$sce","_","$stateParams","$location","$window","DTOptionsBuilder","DTColumnDefBuilder","Authentication","Mappings","Genes","Alterations","Cancertypes","Drugs","Trials","Venn","D3","S",function($scope,$sce,_,$stateParams,$location,$window,DTOptionsBuilder,DTColumnDefBuilder,Authentication,Mappings,Genes,Alterations,CancerTypes,Drugs,Trials,Venn,D3,S){function searchTrialsBySelectedGroup(group,callback){$scope.selectedGroup=group,Trials.listWithnctIds.search($scope.selectedGroup.nctIds,function(data){$scope.trials=data.map(function(d){var regex=new RegExp($scope.selectedGroup.label.replace(/,\s*/g,"|"),"gi"),ec=d.eligibilityCriteria.replace(/[\n\r]{2}\s+/g,"zhxzhx").replace(/[\n\r]{1}\s+/g," ").replace(/zhxzhx/g,"\n");for(var key in $scope.selectedVariants){var _symbol=$scope.selectedVariants[key].symbol,_regex=new RegExp(_symbol,"g");if("alt"===key){var subGene=/([a-zA-Z]+\d+)[a-zA-Z]+/.exec(_symbol);_regex=new RegExp(_symbol+"|"+subGene[1],"g")}var _html='<span class="highlight">'+_symbol+"</span>";ec=ec.replace(_regex,_html)}return d.eligibilityCriteria=S(ec).lines().filter(function(e){return-1!==regexIndexOf(e,regex,0,d)?!0:!1}),d.intervention=d.drugs.map(function(e){return e.drugName}).join(", "),d}),$scope.selectedTrials=angular.copy($scope.trials),initCheckboxVal(),console.log($scope.selectedTrials.map(function(d){return d.nctId})),angular.isFunction(callback)&&callback()})}function initCheckboxVal(){$scope.checkboxVal={};for(var key in $scope.selectedVariants)$scope.checkboxVal[key]=!0}function openMappingList(){$window.open("#!/mappings/list")}function regexIndexOf(string,regex,startpos,d){var indexOf=string.substring(startpos||0).search(regex);return indexOf>=0?indexOf+(startpos||0):indexOf}function venn(groups,combined){var sets=groups.map(function(e,i){var datum={};return datum.name=e.symbol,datum.sets=[i],datum.label=e.symbol,datum.size=e.nctIds.length,datum.nctIds=e.nctIds,datum.variants=[e.symbol],datum}),overlaps=combined.map(function(d){var datum={sets:[],size:0,label:"",name:"",variants:[],nctIds:[]};return d.name.forEach(function(e){for(var _index=-1,i=0;i<groups.length;i++)if(groups[i].symbol===e){_index=i;break}-1!==_index&&(datum.sets.push(_index),datum.variants.push(e))}),datum.size=d.nctIds.length,datum.nctIds=d.nctIds,datum.label="",datum.name=datum.variants.join(", "),datum}).filter(function(e){return e.sets.length>1?!0:!1}).reverse();sets=sets.concat(overlaps);var tooltip=D3.select("#venn").append("div").attr("class","venntooltip");D3.select("#venn svg").remove(),D3.selection.prototype.moveParentToFront=function(){return this.each(function(){this.parentNode.parentNode.appendChild(this.parentNode)})};var chart=Venn.VennDiagram().width(500).height(300),div=D3.select("#venn");div.datum(sets).call(chart),div.selectAll("path").style("stroke-opacity",0).style("stroke","#fff").style("stroke-width",0),div.selectAll("g").on("mouseover",function(d,i){Venn.sortAreas(div,d);var selection=D3.select(this).select("circle");selection.moveParentToFront().transition().style("fill-opacity",.5).style("cursor","pointer").style("stroke-opacity",1),tooltip.transition().duration(400).style("opacity",.9),tooltip.text(d.size+" users"),selection=D3.select(this).transition("tooltip").duration(400),selection.select("path").style("stroke-width",3).style("fill-opacity",1===d.sets.length?.4:.1).style("stroke-opacity",1)}).on("mousemove",function(){tooltip.style("left",D3.event.pageX+"px").style("top",D3.event.pageY-28+"px")}).on("mouseout",function(d,i){tooltip.transition().duration(400).style("opacity",0);var selection=D3.select(this).transition("tooltip").duration(400);selection.select("path").style("stroke-width",0).style("fill-opacity",1===d.sets.length?.25:0).style("stroke-opacity",0)}).on("click",function(d,i){searchTrialsBySelectedGroup(d)})}function combination(array){for(var len=array.length,n=1<<len,result=[],i=1;n>i;i++){for(var content={},name=[],nctIds=[],j=0;len>j;j++){var temp=i;temp&1<<j&&(name.push(array[j].symbol),nctIds=0===nctIds.length?array[j].nctIds:$scope.intersection(nctIds,array[j].nctIds))}content.name=name,content.nctIds=nctIds,result.push(content)}return result.sort(function(a,b){return a.name.length>b.name.length?-1:1})}function initParams(){$scope.selectedVariants={gene:"",alt:"",cancerType:""},$scope.selectedGroup={name:"NA",nctIds:[]},$scope.trailGroups=[],$scope.dtOptions=DTOptionsBuilder.newOptions().withDOM("lifrtp").withBootstrap(),$scope.dtColumns=[DTColumnDefBuilder.newColumnDef(0),DTColumnDefBuilder.newColumnDef(1),DTColumnDefBuilder.newColumnDef(2),DTColumnDefBuilder.newColumnDef(3).notSortable()]}function geneList(){$scope.genes=Genes.gene.query()}function altList(){$scope.alts=Alterations.query()}function cancerTypeList(){$scope.cancerTypes=CancerTypes.query()}function drugList(){$scope.drugs=Drugs.full.query()}$scope.authentication=Authentication,$scope.init=function(){initParams(),geneList(),altList(),cancerTypeList(),drugList()},$scope.findList=function(group){searchTrialsBySelectedGroup(group,function(){openMappingList()})},$scope.find=function(){},$scope.search=function(){var groups=[],combined=[];$scope.trials=[],initCheckboxVal(),groups.push($scope.selectedVariants.gene),groups.push($scope.selectedVariants.alt),groups.push($scope.selectedVariants.cancerType),groups=$scope.compact(groups),combined=combination(groups),venn(groups,angular.copy(combined)),$scope.trailGroups=combined.map(function(e){return e.name=e.name.join(", "),e}),$scope.$watch("checkboxVal",function(n,o){if($scope.trials&&$scope.trials.length>0){var nctIds=$scope.trials.map(function(d){return d.nctId});for(var key in n)n[key]||(nctIds=_.difference(nctIds,$scope.selectedVariants[key].nctIds));$scope.selectedTrials=$scope.trials.filter(function(d){return-1!==nctIds.indexOf(d.nctId)?!0:!1})}},!0)},$scope.example=function(){$scope.genes.forEach(function(d){"BRAF"===d.symbol&&($scope.selectedVariants.gene=d)}),$scope.alts.forEach(function(d){"V600E"===d.symbol&&($scope.selectedVariants.alt=d)}),$scope.cancerTypes.forEach(function(d){"melanoma"===d.symbol&&($scope.selectedVariants.cancerType=d)}),$scope.search()},$scope.showCheckbox=function(variant){return variant&&-1===$scope.selectedGroup.variants.indexOf(variant)?!0:!1}}]),angular.module("mappings").factory("Mappings",["$resource",function($resource){return{mapping:$resource("mappings/:alteration/:nctId",{alteration:"@alteration",nctId:"@nctId"},{update:{method:"PUT"},query:{isArray:!0}}),mappingSearch:$resource("mappings/:Idvalue",{},{update:{method:"PUT"},deleteAlt:{method:"PATCH"},completeStatus:{method:"POST",isArray:!1},get:{method:"GET",isArray:!1}}),searchEngine:$resource("mappingGeneral/:searchEngineKeyword",{},{query:{method:"GET",isArray:!0}}),searchByStatus:$resource("mappingStatus/:status",{status:"@completeStatus"},{query:{method:"GET",isArray:!0}}),searchByAltId:$resource("mappingGeneral/mappingAltId/:altId",{},{query:{method:"GET",isArray:!0}})}}]),angular.module("trials").run(["Menus",function(Menus){}]),angular.module("trials").config(["$stateProvider",function($stateProvider){$stateProvider.state("listTrials",{url:"/trials",templateUrl:"modules/trials/views/list-trials.client.view.html"}).state("createTrial",{url:"/trials/create",templateUrl:"modules/trials/views/create-trial.client.view.html"}).state("searchTrial",{url:"/trials/search",templateUrl:"modules/trials/views/search-trial.client.view.html"}).state("searchByKeyword",{url:"/trials/search/:keyword",templateUrl:"modules/trials/views/search-trial.client.view.html"}).state("assignTrial",{url:"/trials/assign",templateUrl:"modules/trials/views/assign-trial.client.view.html"}).state("assignTrialByKeyword",{url:"/trials/assign/:keyword",templateUrl:"modules/trials/views/assign-trial.client.view.html"}).state("viewTrial",{url:"/trials/:nctId",templateUrl:"modules/trials/views/view-trial.client.view.html"}).state("editTrial",{url:"/trials/:nctId/edit",templateUrl:"modules/trials/views/edit-trial.client.view.html"})}]),angular.module("trials").controller("TrialsController",["$scope","$stateParams","$location","Authentication","Trials","Genes","Alterations","Cancertypes","Drugs","Mappings",function($scope,$stateParams,$location,Authentication,Trials,Genes,Alterations,Cancertypes,Drugs,Mappings){function findAlterations(nctId){var alteration_id=[];Mappings.mappingSearch.get({Idvalue:nctId},function(a){for(var i=0;i<a.alteration.length;i++)alteration_id.push(a.alteration[i].alteration_Id);alteration_id.length>0?$scope.trialAlterations=Alterations.alterationByIds.query({Ids:alteration_id}):$scope.trialAlterations=[]},function(b){$scope.trialAlterations=[],console.log("no alteration information for this trial ID")})}$scope.authentication=Authentication,$scope.nctId="",$scope.drugHeader=["Drug Name","Synonyms","FDA Approved","ATC Codes","Description"],$scope.drugItems=["drugName","synonyms","fdaApproved","atcCodes","description"],$scope.tumorHeader=["Name","Tissue","Clinical TrialKeywords"],$scope.tumorItems=["name","tissue","clinicalTrialKeywords"],$scope.showVar=!1,$scope.alertShow=!1,$scope.showAll=!1,$scope.showAllDrugs=!1,$scope.switchStatus=function(){Mappings.mappingSearch.get({Idvalue:$scope.trial.nctId},function(u,getResponseHeaders){console.log("found trial in the mapping table",u),u.$completeStatus({Idvalue:$scope.trial.nctId},function(response){console.log("success updated"),$scope.trialMappings=Mappings.mappingSearch.get({Idvalue:$stateParams.nctId})},function(response){console.log("failed")})},function(error){console.log("error: ",error)})},$scope.showAllTitle=function(){$scope.showVar=!0},$scope.showDrugs=function(){$scope.showAllDrugs=!$scope.showAllDrugs},$scope.displayStyle=function(){$scope.showAll=!$scope.showAll},$scope.create=function(){var trial=new Trials({nctId:this.name});trial.$save(function(response){$location.path("trials/"+response._id),$scope.name=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.remove=function(trial){if(trial){trial.$remove();for(var i in $scope.trials)$scope.trials[i]===trial&&$scope.trials.splice(i,1)}else $scope.trial.$remove(function(){$location.path("trials")})},$scope.update=function(){var trial=$scope.trial;trial.$update(function(){$location.path("trials/"+trial.nctId)},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.find=function(){$scope.trials=Trials.nctId.query()},$scope.findOne=function(){$scope.trial=Trials.nctId.get({nctId:$stateParams.nctId}),$scope.trialAlterations=findAlterations($stateParams.nctId),$scope.trialMappings=Mappings.mappingSearch.get({Idvalue:$stateParams.nctId})},$scope.searchByKeyword=function(){$scope.trials=Trials.keyword.query({keyword:$scope.keyword}),console.log($scope.trials)},$scope.searchTrailBynctId=function(){$location.path("trials/"+$scope.nctId)},$scope.assignTrailBynctId=function(){$scope.trial=Trials.nctId.get({nctId:$scope.nctId}),$scope.trialGenes=Genes.nctIds.get({nctIds:[$scope.nctId]}),console.log($scope.trialGenes)},$scope.getDrugs=function(drugs){return drugs.map(function(e){return e.drugName}).join(", ")};var getLists=function(str){var slicedResult=[];return-1!==str.indexOf("1. ")&&(str.indexOf("1. ")<str.indexOf(" - ")||-1===str.indexOf(" - "))?(slicedResult=str.replace(/(\d)[.]\s/g,"").split(""),slicedResult=_.map(slicedResult,function(value){return value.slice(0,-1).trim()}),slicedResult=_.compact(slicedResult)):(slicedResult=str.split(" - "),slicedResult=_.map(slicedResult,function(value){return value.trim()}),slicedResult=_.compact(slicedResult)),slicedResult=_.map(slicedResult,function(element){return element.split(". ")}),slicedResult=_.flatten(slicedResult)};$scope.getEligibility=function(eligibility,elgType){_.isUndefined(eligibility)&&(eligibility="");var m=eligibility.indexOf("Inclusion Criteria"),n=eligibility.indexOf("Exclusion Criteria");if(-1===m&&"inclusion"===elgType||-1===n&&"exclusion"===elgType)return"";m+=20,n+=20;var output="<ol>";if("inclusion"===elgType){var inEligi=eligibility.substr(m,n-m-20),inEligiArray=getLists(inEligi);_.each(inEligiArray,function(element){output=output+"<li>"+element+"</li>"})}else if("exclusion"===elgType){var exEligi=eligibility.substr(n),exEligiArray=getLists(exEligi);_.each(exEligiArray,function(element){output=output+"<li>"+element+"</li>"})}return output+="</ol>"},$scope.addAlterationBynctId=function(){Alterations.alteration.get({alteration:$scope.newAlteration,gene:$scope.newGene},function(u,getResponseHeaders){console.log("alteration existed..."),Mappings.mappingSearch.get({Idvalue:$scope.trial.nctId},function(a){console.log("nctId record exist in mapping table...",a),
Mappings.mapping.get({alteration:u._id,nctId:$scope.trial.nctId},function(mapRecord){console.log("nothing else need to do",mapRecord)},function(){console.log("update alteration array"),a.$update({Idvalue:u._id},function(){console.log("successfully update alteration array"),$scope.trialAlterations=findAlterations($scope.trial.nctId)},function(){console.log("update alteration array failed")})})},function(b){console.log("nctId record not exist in mapping table..."),Mappings.mapping.save({alteration:u._id,nctId:$scope.trial.nctId},function(){console.log("success insert record in mapping table"),$scope.trialAlterations=findAlterations($scope.trial.nctId)},function(error){console.log("did not insert successfully because of ",error)})})},function(getError){console.log("alteration did not exist"),Alterations.alteration.save({alteration:$scope.newAlteration,gene:$scope.newGene},function(u,getResponseHeaders){console.log("save alteration successfully"),Mappings.mappingSearch.get({Idvalue:$scope.trial.nctId},function(a){console.log("nctId record exist in mapping table...",a),Mappings.mapping.get({alteration:u._id,nctId:$scope.trial.nctId},function(mapRecord){console.log("nothing else need to do",mapRecord)},function(){console.log("update alteration array"),a.$update({Idvalue:u._id},function(){console.log("successfully update alteration array"),$scope.trialAlterations=findAlterations($scope.trial.nctId)},function(){console.log("update alteration array failed")})})},function(b){console.log("nctId record not exist in mapping table..."),Mappings.mapping.save({alteration:u._id,nctId:$scope.trial.nctId},function(){console.log("success insert record in mapping table"),$scope.trialAlterations=findAlterations($scope.trial.nctId)},function(error){console.log("did not insert successfully because of ",error)})})},function(){console.log("failed to save alteration ")})})},$scope.deleteAlteration=function(alteration,gene){Alterations.alteration.get({alteration:alteration,gene:gene},function(a){console.log("find this alteration"),Mappings.mappingSearch.get({Idvalue:$scope.trial.nctId},function(c){console.log("find in mapping record",a._id),c.$deleteAlt({Idvalue:a._id},function(e){console.log("delete successfully"),$scope.trialAlterations=findAlterations($scope.trial.nctId)},function(f){console.log("delete failed",f)})},function(d){console.log("not find mapping record")})},function(b){console.log("not find this alteration")})},$scope.updateTrial=function(){Trials.updateRequestedTrial.get({requestednctId:$scope.trial.nctId},function(u,getResponseHeaders){u.$update(function(response){$scope.trial=Trials.nctId.get({nctId:$stateParams.nctId}),console.log("success updated")},function(response){console.log("failed")})},function(error){console.log("error: ",error)})}}]),angular.module("trials").factory("Trials",["$resource",function($resource){return{nctId:$resource("trials/:nctId",{nctId:"@nctId"},{update:{method:"PUT"}}),keyword:$resource("trials/search/:keyword",{keyword:"@_id"}),listWithnctIds:$resource("trials/list",{nctIds:[]},{search:{method:"POST",isArray:!0}}),updateRequestedTrial:$resource("trials/:requestednctId",{requestednctId:"@nctId"},{update:{method:"PUT"},updateStatus:{method:"POST"}}),searchEngine:$resource("trials/search/:searchEngineKeyword",{},{query:{method:"GET",isArray:!0}}),nctIds:$resource("trialsMultiSearch/:nctIds",{nctIds:[]},{query:{method:"GET",isArray:!0}})}}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("accounts",{url:"/settings/accounts",templateUrl:"modules/users/views/settings/social-accounts.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invlaid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http["delete"]("/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})},$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(response){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);